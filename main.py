from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from copy import deepcopy
from states import UserStates, BalanceStates
from requestto import requestto
# from background import keep_alive
from buttons import *
from database import *
from yoomoney import Client
from config import *
import time
import logging


logging.info("An INFO")

yoomoney_client = Client(YOOMONEY_TOKEN)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DATA2TEXT = {
    "successfulPeople": "–£—Å–ø–µ—à–Ω—ã–µ –ª—é–¥–∏",
    "Universities": "–í–£–ó—ã",
    "Courses": "–ö—É—Ä—Å—ã",
    "studentExperience": "–û–ø—ã—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
    "addMaterials": "–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "olympiads": "–û–ª–∏–º–ø–∏–∞–¥—ã"
}


async def generate_label(user_id, count):
  t = int(time.time()) % 1000000
  label = f"C{count}ID{user_id}T{t}"
  return label

async def check_payment(label):
  history = yoomoney_client.operation_history()
  print(f"\nLabel: {label}")
  for operation in history.operations:
    if operation.label == label and operation.status == "success":
      print(f"–ü–õ–ê–¢–Å–ñ {operation.amount} –£–°–ü–ï–®–ù–û –ü–†–û–®–Å–õ")
      return True
      break
  else:
    print("–ü–õ–ê–¢–Å–ñ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù")
    return False


# @dp.message_handler(commands=['start', 'new_plan'], state="*") # –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
# async def cmd_start(message: types.Message, state):
#     """
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥.
#     """
#     st = await state.get_state()
#     if st in UserStates:
#         if st == "UserStates:result":
#             await message.answer("–°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω. <b>–ü–æ–≥–Ω–∞–ª–∏?</b>", reply_markup=launchMenu, parse_mode="HTML")
#             async with state.proxy() as data:
#                 await bot.edit_message_text("<i>–£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–ª–∞–Ω</i>", chat_id=message.from_user.id, message_id=data["result_message_id"], parse_mode="HTML")
#             await state.set_data()
#             await UserStates.launch.set()
#         else:
#             await message.answer("<i>–ó–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É</i>", parse_mode="HTML")
#     else:
#         await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å–º–æ—Ç—Ä—é —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ. –Ø <b>—á–∞—Ç-–±–æ—Ç Max</b>. –Ø <b>—Å–æ–∑–¥–∞—é –ø–ª–∞–Ω—ã</b> –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\
# –ß—Ç–æ–±—ã —è <i>–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å</i> –ø–ª–∞–Ω —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <i>–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤</i>.\n<b>–ü–æ–≥–Ω–∞–ª–∏?</b>", reply_markup=launchMenu, parse_mode="HTML")
#         await UserStates.launch.set()


@dp.message_handler(commands=['start', 'new_plan'], state="*")  # –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–∫–æ—Ä–µ–µ –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å
async def cmd_start(message: types.Message, state):
  user_id = message.from_user.id
  if await check_id(user_id):
    st = await state.get_state()
    if st in UserStates:
      if st == "UserStates:result":
        await message.answer(
            "–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω?\n\n<b>–ï—Å–ª–∏ –¥–∞, —Ç–æ –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>üëá",
            reply_markup=main_menu,
            parse_mode="HTML")
      else:
        await message.answer("<i>–ó–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É</i>", parse_mode="HTML")
    else:
      await message.answer("üè†<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=main_menu)
  else:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —Å–º–æ—Ç—Ä—é —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ.\n–ü–æ—ç—Ç–æ–º—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>2 {CURRENCY_NAME}</b>",
        parse_mode="HTML")
    await message.answer(f"–ö–æ—Ä–æ—Ç–∫–æ –æ–±–æ –º–Ω–µüëá\n\n–Ø <b>—á–∞—Ç-–±–æ—Ç Max</b>.\n–Ø <b>—Å–æ–∑–¥–∞—é –ø–ª–∞–Ω—ã</b> –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\
–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤</b>.\n\n–ï—Å–ª–∏ –≥–æ—Ç–æ–≤, —Ç–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ù–æ–≤—ã–π –ø–ª–∞–Ω</b>",
        reply_markup=main_menu,
        parse_mode="HTML")
    await add_new_user(user_id)


@dp.message_handler(Text("–ë–∞–ª–∞–Ω—Åüí∞"), state="*")
async def balance(message: types.Message, state):
  user_id = message.from_user.id
  await message.answer(f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å {await get_coins(user_id)} {CURRENCY_NAME}</b>",
                       reply_markup=balanceMenu,
                       parse_mode="HTML")
  await BalanceStates.balance.set()


@dp.message_handler(Text("–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏"), state=BalanceStates.balance)
async def input_amount(message: types.Message, state):
  await message.answer(f"<b>1 {CURRENCY_NAME} = {PRICE_FOR_COIN} —Ä—É–±–ª–µ–π</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {CURRENCY_NAME}, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.", reply_markup=cancelMenu, parse_mode="HTML")
  await BalanceStates.next()

@dp.message_handler(lambda message: not message.text.isdigit(), state=BalanceStates.pay)
async def invalid_input_digit(message: types.Message):
  await message.answer("<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.</i>", parse_mode="HTML")

@dp.message_handler(state=BalanceStates.pay)
async def process_amount(message: types.Message, state):
  user_id = message.from_user.id
  amount = int(message.text)
  label = await generate_label(user_id, amount)
  print(label)
  await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>{amount} {CURRENCY_NAME}</b>\n\n–¶–µ–Ω–∞: <b>{amount * PRICE_FOR_COIN} —Ä—É–±.</b>", reply_markup = await GetPaymentsMenu(label), parse_mode="HTML")
  await BalanceStates.next()

@dp.callback_query_handler(lambda c: "C" == str(c.data)[0], state="*")
async def CheckPayment(call, state=FSMContext):
    user_id = call.from_user.id
    label = call.data
    count = int(label[1:label.index("ID")])
    if await check_payment(label):
      await call.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
      await bot.edit_message_text(f"<b>–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {count} {CURRENCY_NAME}</b>\n\n–ù–∞ –Ω–∏—Ö –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω!", 
                                  chat_id=user_id, 
                                  message_id=call.message.message_id, 
                                  parse_mode="HTML")
      await add_coins(user_id, count)
      print(f"{user_id} –ø–æ–∫—É–ø–∫–∞ {count} {CURRENCY_NAME}\n")
    else:
        await call.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
    
@dp.message_handler(Text("–ù–æ–≤—ã–π –ø–ª–∞–Ωüìã"), state="*")
async def prelaunch_new(message: types.Message, state):
  st = await state.get_state()
  if st in UserStates:
    if st == "UserStates:result":
      await message.answer(
          "<b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï\n\n–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞, –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç—ë—Ä—Ç—ã</b>",
          parse_mode="HTML",
          reply_markup=createOrCancelMenu)
    else:
      await message.answer("<i>–ó–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É</i>",
                           parse_mode="HTML")
      return
  await message.answer(f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ - <b>1 {CURRENCY_NAME}</b>",
                       parse_mode="HTML",
                       reply_markup=createOrCancelMenu)
  await UserStates.launch.set()


@dp.message_handler(Text("–û—Ç–º–µ–Ω–∞‚ùå"), state=UserStates.launch)
async def launch_cancel(message: types.Message, state):
  await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
                       reply_markup=main_menu,
                       parse_mode="HTML")
  await state.finish()


@dp.message_handler(Text("–°–æ–∑–¥–∞—Ç—å‚úÖ"), state=UserStates.launch)
async def launch(message: types.Message, state):
  """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥.
    """
  async with state.proxy() as data:
    if "result_message_id" in data:
      await bot.edit_message_text("<i>–£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–ª–∞–Ω</i>",
                                  chat_id=message.from_user.id,
                                  message_id=data["result_message_id"],
                                  parse_mode="HTML")
  await state.set_data()
  await message.answer("–ù–∞—á–∞–ª–∏! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                       reply_markup=removeButton)
  await UserStates.name.set()


@dp.message_handler(lambda message: message.text.isdigit(),
                    state=UserStates.name)
async def process_name_invalid(message: types.Message):
  """
    –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã. (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "name")
    """
  await message.answer(
      "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ —Ü–∏—Ñ—Ä.</i>",
      parse_mode="HTML")


@dp.message_handler(state=UserStates.name)
async def process_name(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['name'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {data['name']}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "age"
    await UserStates.age.set()


@dp.message_handler(lambda message: not message.text.isdigit(),
                    state=UserStates.age)
async def process_age_invalid(message: types.Message):
  """
    –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "age")
    """
  await message.answer(
      "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, 15.</i>",
      parse_mode="HTML")


@dp.message_handler(state=UserStates.age)
async def process_age(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['age'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è
    await message.answer("–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?")
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "grade"
    await UserStates.grade.set()


@dp.message_handler(lambda message: not message.text.isdigit(),
                    state=UserStates.grade)
async def process_grade_invalid_numb(message: types.Message):
  """
    –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "grade")
    """
  await message.answer(
      "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, 9.</i>",
      parse_mode="HTML")


@dp.message_handler(
    lambda message: int(message.text) < 1 or int(message.text) > 11,
    state=UserStates.grade)
async def process_grade_invalid_interv(message: types.Message):
  """
    –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 11. (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "grade")
    """
  await message.answer("<i>–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 11.</i>",
                       parse_mode="HTML")


@dp.message_handler(state=UserStates.grade)
async def process_grade(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['grade'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –≤ –∫–∞–∫–æ–π —à–∫–æ–ª–µ —É—á–∏—à—å—Å—è
    await message.answer("–ö–∞–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞?",
                         reply_markup=profileMenu)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "school"
    await UserStates.profile.set()


@dp.message_handler(lambda message: message.text not in [
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π", "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–Ω–∞—É—á–Ω—ã–π",
    "–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π", "–û–±—â–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π"
],
                    state=UserStates.profile)
async def process_profile_invalid(message: types.Message):
  """
    –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "profile")
    """
  await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞‚¨áÔ∏è")


@dp.message_handler(state=UserStates.profile)
async def process_profile(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['profile'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–∏–≤–µ—à—å
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?",
                         reply_markup=removeButton)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "city"
    await UserStates.city.set()


@dp.message_handler(state=UserStates.city)
async def process_city(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['city'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
    await message.answer(
        "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–µ–π —Ü–µ–ª–∏?",
        reply_markup=changeCityMenu)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "change_city"
    await UserStates.change_city.set()

@dp.message_handler(lambda message: message.text not in ("–î–∞, –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥", "–•–æ—á—É –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ —Å—Ç–æ–ª–∏—Ü—É", "–ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ —Å–æ—Å–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω", \
                    "–ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –≥–æ—Ä–æ–¥ –≤ —Å–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ", "–ù–µ—Ç, –æ—Å—Ç–∞–Ω—É—Å—å –≤ —Å–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ"), state=UserStates.change_city)
async def process_change_city_invalid(message: types.Message):
  """
    –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "change_city")
    """
  await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞‚¨áÔ∏è")


@dp.message_handler(state=UserStates.change_city)
async def process_change_city(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['change_city'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º Soft Skills
    await message.answer(
        "–ö–∞–∫–∏–µ <b>Soft Skills</b> —É —Ç–µ–±—è —Ä–∞–∑–≤–∏—Ç—ã? <i>(–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å)</i>",
        parse_mode="HTML",
        reply_markup=softSkillsMenu)
    data['tmp_soft_skills'] = list()
    data["user_soft_skills_menu"] = deepcopy(softSkillsMenu)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "soft_skills"
    await UserStates.soft_skills.set()


@dp.callback_query_handler(lambda c: c.data == "continue",
                           state=UserStates.soft_skills)
async def process_soft_skills(call, state: FSMContext):
  async with state.proxy() as data:
    data['soft_skills'] = ", ".join(data['tmp_soft_skills'])
    del data['tmp_soft_skills']
    del data["user_soft_skills_menu"]
    await call.answer("Soft skills –≤—ã–±—Ä–∞–Ω—ã")
    if data['soft_skills']:
      await bot.edit_message_text(
          f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ <b>Soft skills</b>: <i>{data['soft_skills']}</i>",
          chat_id=call.from_user.id,
          message_id=call.message.message_id,
          parse_mode="HTML")
    else:
      await bot.edit_message_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ <b>Soft skills</b>",
                                  chat_id=call.from_user.id,
                                  message_id=call.message.message_id,
                                  parse_mode="HTML")
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º Hard Skills
    await bot.send_message(
        call.from_user.id,
        "–ö–∞–∫–∏–µ <b>Hard Skills</b> —É —Ç–µ–±—è —Ä–∞–∑–≤–∏—Ç—ã? <i>(–ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</i>",
        parse_mode="HTML",
        reply_markup=removeButton)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "hard_skills"
    await UserStates.hard_skills.set()


@dp.callback_query_handler(state=UserStates.soft_skills)
async def add_soft_skills(call, state):
  async with state.proxy() as data:
    user_data = call.data.split(",")
    numb = int(user_data[0])
    skill = user_data[1]
    if skill not in data['tmp_soft_skills']:
      data["user_soft_skills_menu"]["inline_keyboard"][numb][0]["text"] += "‚úÖ"
      data['tmp_soft_skills'].append(skill)
      await call.answer(f"{skill} –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
      data["user_soft_skills_menu"]["inline_keyboard"][numb][0]["text"] = softSkillsMenu["inline_keyboard"][numb][0]["text"]
      data['tmp_soft_skills'].remove(skill)
      await call.answer(f"{skill} —É–¥–∞–ª—ë–Ω")
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=data["user_soft_skills_menu"])


@dp.message_handler(state=UserStates.hard_skills)
async def process_hard_skills(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['hard_skills'] = message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ –Ω—Ä–∞–≤—è—Ç—Å—è
    await message.answer(
        "–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è? (–ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "subjects"
    await UserStates.subjects.set()


@dp.message_handler(state=UserStates.subjects)
async def process_subjects(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['subjects'] = message.text
    await message.answer("<b>–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!</b>",
                         parse_mode="HTML",
                         reply_markup=main_menu)
    result_text = "–Ø –º–æ–≥—É:\n\
1)  –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ–± –∏—Å—Ç–æ—Ä–∏—è—Ö –ª—é–¥–µ–π, –¥–æ–±–∏–≤—à–∏—Ö—Å—è —É—Å–ø–µ—Ö–∞ –≤ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Ç–≤–æ—é –æ–±–ª–∞—Å—Ç—è—Ö\n\
2)  –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ —Ç–æ–º, –≤ –∫–∞–∫–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö –∫–ª–∞—Å—Å–Ω–æ –æ–±—É—á–∞—é—Ç —Ç–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\
3)  –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫—É—Ä—Å—ã –æ—Ç –≤–µ–¥—É—â–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –º–∏—Ä–∞\n\
4)  –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤\n\
5)  –î–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è —Ç–µ–±—è: –Æ—Ç—É–±-–∫–∞–Ω–∞–ª—ã, –ö–Ω–∏–≥–∏, —É—á–µ–±–Ω–∏–∫–∏, —Å–∞–π—Ç—ã\n\
6)  –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏ –¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–±–µ —Å—Ç–æ–∏—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å."

    await message.answer(result_text, reply_markup=resultMenu)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "result"
    await UserStates.result.set()


@dp.callback_query_handler(state=UserStates.result)
async def answers(call, state):
  user_data = call.data.split(",")
  numb = int(user_data[0])
  option = user_data[1]
  await call.answer(DATA2TEXT[option])
  async with state.proxy() as data:
    data["result_message_id"] = call.message.message_id
    if option not in data:
      await bot.edit_message_text("<i>–ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç</i>üïñ",
                                  chat_id=call.from_user.id,
                                  message_id=call.message.message_id,
                                  parse_mode="HTML")
      result = await requestto(option, input_data=dict(data))
      # result = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
      data[option] = f"<b>{DATA2TEXT[option]}</b>\n\n{result}"
    userLookResultMenu = deepcopy(resultMenu)
    userLookResultMenu["inline_keyboard"][numb][0]["text"] += "üëÄ"
    await bot.edit_message_text(data[option],
                                chat_id=call.from_user.id,
                                message_id=data["result_message_id"],
                                parse_mode="HTML",
                                reply_markup=userLookResultMenu,
                                disable_web_page_preview=True)


# keep_alive()
if __name__ == '__main__':
  executor.start_polling(dp, skip_updates=True)
